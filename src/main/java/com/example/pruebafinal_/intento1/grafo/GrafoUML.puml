@startuml
'https://plantuml.com/class-diagram





package grafo{
class Vertice<tipoDeDato>{
#dato:TipoDeDato
#arcoEntrada: ListaSimple<Arista<tipoDeDato>>
#arcoSalida: ListaSimple<Arista<tipoDeDato>>
 +Vertice(dato:tipoDeDato)
 +addArcoSalida(arco:Arista<tipoDeDato>):void
 +addArcoEntrada(arco:Arista<tipoDeDato>):void
 +getData():tipoDeDato

}

class Arista<tipoDeDato>{
#origen:Vertice
#destino:Vertice
#peso:double
+Arista(origen:Vertice, destino: Vertice, peso:double)
+Arista(origen:Vertice, destino: Vertice)
}
class Dupla<tipoDeDato>{
-clave:TipoDeDato1
-dato:TipoDeDato2
+Dupla(clave:TipoDeDato1,dato:TipoDeDato2)
+getClave():TipoDeDato1
+getData():TipoDeDato2
+setClave(clave:TipoDeDato1)
+setDato(clave:TipoDeDato2)

}

class Mapa<tipoDeDato>{
-datosMapa:ListaSimple<Dupla<TipoDato1,TipoDato2>>
+Mapa()
+add((clave:TipoDeDato1,dato:TipoDeDato):void
+getValue(clave:TipoDeDato1):TipoDeDato2
+getNumElm():int
+getIndice(): ListaSimple<TipoDato1>
+getIndice2(): ListaSimple<TipoDato2>

}
class Cola<tipoDeDato>{
#primero: ElementoLDE<tipoDeDato>
#ultimo: ElementoLDE<tipoDeDato>
+cola()
+add(t:tipoDeDato)
+poll():ElementoLDE<tipoDeDato>
+isVacia():boolean

}

class Camino<tipoDeDato>{
-camino: ListaSimple<Vertice<tipoDeDato>>
-coste:double
+Camino(camino:ListaSimple<Vertice<tipoDeDato>>, coste:double)
+getCamino():ListaSimple<Vertice<tipoDeDato>>
+getCoste():double
+toString():String

}
class Grafo<tipoDeDato>{
-vertices:ListaSimple<Vertice<tipoDeDato>>
-arcos:ListaSimple<Arista<tipoDeDato>>
+Grafo()
+addArcos(arco:Arista<tipoDeDato>)
+addVertices(vertice:Vertice<tipoDeDato>)
+dijkstra(origen Vertice<tipoDeDato>): Mapa<Vertice<tipoDeDato>,Camino<tipoDeDato>>
+isPosible(origen:Vertice<tipoDeDato, destino:Vertice<tipoDeDato>): boolean
+caminoOriDest(origen:Vertice<tipoDeDato, destino:Vertice<tipoDeDato>): Camino<tipoDeDato>
+dijkstra_init(origen: Vertice<tipoDeDato>, distancias: Mapa<Vertice<tipoDeDato>,Double>, colaPendiente:Cola<Vertice<tipoDeDato>> , verticesAnteriores: Mapa<Vertice<tipoDeDato>,Vertice<tipoDeDato>>)
+dijkstra_calcula(distancias: Mapa<Vertice<tipoDeDato>,Double>, colaPendiente:Cola<Vertice<tipoDeDato>>, verticesAnteriores: Mapa<Vertice<tipoDeDato>,Vertice<tipoDeDato>>)
+dijkstra_procesaResultado(distancias: Mapa<Vertice<tipoDeDato>,Double>, verticesAnteriores: Mapa<Vertice<tipoDeDato>,Vertice<tipoDeDato>>, origen: Vertice<tipoDeDato>): Mapa<Vertice<tipoDeDato>,Camino<tipoDeDato>>
+borrarV(v: Vertice<tipoDeDato>)
+borrarA(a:Arista<tipoDeDato>)
+getVertices():ListaSimple<Vertice<tipoDeDato>>
+getAristas(): ListaSimple<Arista<tipoDeDato>>
+toPrintV():String
+toPrintA():String
}
Grafo-->Arista
Grafo-->Vertice
Mapa<--Grafo
Dupla<--Mapa
Grafo-->Cola
Camino<--Grafo
package Listas{
class ElementoLDE<tipoDeDato>{
    +anterior:ElementoLDE
    +siguiente:ElementoLDE
    -data:tipoDeDato
    +ElementoLDE(o:tipoDeDato)
    +getSiguiente():ElementoLDE
    +getAnterior():ElementoLDE
    +getData():tipoDeDato
    +setData(data:tipoDeDato)
    +setAnterior(anterior:ElementoLDE)
    +setSiguiente(siguiente: ElementoLDE)
}
class ElementoLS<tipoDeDato>{
    -data:ElementoLS
    +ElementoLS(t:tipoDeDato)
    +getData():tipoDeDato
    +setData(o:tipoDeDato)
}
class ListaSimple<tipoDeDato>{
-datos:ElementoLS<tipoDeDato>
-maximo: Integer
+ListaSimple()
+isVacia():boolean
+vaciar():String
+add(el:tipoDeDato):int
+del(pos:int):int
+getNumeroElementos():int
+getPosicion(el:tipoDeDato):Integer
+getPrimero():ElementoLS<tipoDeDato>
+getUltimo():ElementoLS<tipoDeDato>
+getSiguiente():ElementoLS<tipoDeDato>
+getElementoLS(posicion:int):ElementoLS<tipoDeDato>
+vuelta():ListaSimple<tipoDeDato>




}
ListaSimple-->ElementoLS

}
Cola-->ElementoLDE
Grafo-->ListaSimple
}

@enduml